{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":74608,"databundleVersionId":12966160,"sourceType":"competition"},{"sourceId":12805669,"sourceType":"datasetVersion","datasetId":8096934}],"dockerImageVersionId":31089,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-08-21T05:40:40.487555Z","iopub.execute_input":"2025-08-21T05:40:40.487862Z","iopub.status.idle":"2025-08-21T05:40:42.596979Z","shell.execute_reply.started":"2025-08-21T05:40:40.487834Z","shell.execute_reply":"2025-08-21T05:40:42.596012Z"}},"outputs":[{"name":"stdout","text":"/kaggle/input/neurips-open-polymer-prediction-2025/sample_submission.csv\n/kaggle/input/neurips-open-polymer-prediction-2025/train.csv\n/kaggle/input/neurips-open-polymer-prediction-2025/test.csv\n/kaggle/input/neurips-open-polymer-prediction-2025/train_supplement/dataset2.csv\n/kaggle/input/neurips-open-polymer-prediction-2025/train_supplement/dataset4.csv\n/kaggle/input/neurips-open-polymer-prediction-2025/train_supplement/dataset1.csv\n/kaggle/input/neurips-open-polymer-prediction-2025/train_supplement/dataset3.csv\n/kaggle/input/rd-kit/rdkit_pypi-2022.9.5-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\n","output_type":"stream"}],"execution_count":1},{"cell_type":"code","source":"!pip install /kaggle/input/rd-kit/rdkit_pypi-2022.9.5-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-21T05:40:42.601648Z","iopub.execute_input":"2025-08-21T05:40:42.602117Z","iopub.status.idle":"2025-08-21T05:40:49.855026Z","shell.execute_reply.started":"2025-08-21T05:40:42.602082Z","shell.execute_reply":"2025-08-21T05:40:49.853902Z"}},"outputs":[{"name":"stdout","text":"Processing /kaggle/input/rd-kit/rdkit_pypi-2022.9.5-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\nRequirement already satisfied: numpy in /usr/local/lib/python3.11/dist-packages (from rdkit-pypi==2022.9.5) (1.26.4)\nRequirement already satisfied: Pillow in /usr/local/lib/python3.11/dist-packages (from rdkit-pypi==2022.9.5) (11.2.1)\nRequirement already satisfied: mkl_fft in /usr/local/lib/python3.11/dist-packages (from numpy->rdkit-pypi==2022.9.5) (1.3.8)\nRequirement already satisfied: mkl_random in /usr/local/lib/python3.11/dist-packages (from numpy->rdkit-pypi==2022.9.5) (1.2.4)\nRequirement already satisfied: mkl_umath in /usr/local/lib/python3.11/dist-packages (from numpy->rdkit-pypi==2022.9.5) (0.1.1)\nRequirement already satisfied: mkl in /usr/local/lib/python3.11/dist-packages (from numpy->rdkit-pypi==2022.9.5) (2025.2.0)\nRequirement already satisfied: tbb4py in /usr/local/lib/python3.11/dist-packages (from numpy->rdkit-pypi==2022.9.5) (2022.2.0)\nRequirement already satisfied: mkl-service in /usr/local/lib/python3.11/dist-packages (from numpy->rdkit-pypi==2022.9.5) (2.4.1)\nRequirement already satisfied: intel-openmp<2026,>=2024 in /usr/local/lib/python3.11/dist-packages (from mkl->numpy->rdkit-pypi==2022.9.5) (2024.2.0)\nRequirement already satisfied: tbb==2022.* in /usr/local/lib/python3.11/dist-packages (from mkl->numpy->rdkit-pypi==2022.9.5) (2022.2.0)\nRequirement already satisfied: tcmlib==1.* in /usr/local/lib/python3.11/dist-packages (from tbb==2022.*->mkl->numpy->rdkit-pypi==2022.9.5) (1.4.0)\nRequirement already satisfied: intel-cmplr-lib-rt in /usr/local/lib/python3.11/dist-packages (from mkl_umath->numpy->rdkit-pypi==2022.9.5) (2024.2.0)\nRequirement already satisfied: intel-cmplr-lib-ur==2024.2.0 in /usr/local/lib/python3.11/dist-packages (from intel-openmp<2026,>=2024->mkl->numpy->rdkit-pypi==2022.9.5) (2024.2.0)\nInstalling collected packages: rdkit-pypi\nSuccessfully installed rdkit-pypi-2022.9.5\n","output_type":"stream"}],"execution_count":2},{"cell_type":"code","source":"import pandas as pd\ntrain_csv = pd.read_csv(\"/kaggle/input/neurips-open-polymer-prediction-2025/train.csv\")\ntrain_csv['SMILES'][1]","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-21T05:40:49.857538Z","iopub.execute_input":"2025-08-21T05:40:49.857853Z","iopub.status.idle":"2025-08-21T05:40:49.921337Z","shell.execute_reply.started":"2025-08-21T05:40:49.857817Z","shell.execute_reply":"2025-08-21T05:40:49.920485Z"}},"outputs":[{"execution_count":3,"output_type":"execute_result","data":{"text/plain":"'*Nc1ccc([C@H](CCC)c2ccc(C3(c4ccc([C@@H](CCC)c5ccc(N*)cc5)cc4)CCC(CCCCC)CC3)cc2)cc1'"},"metadata":{}}],"execution_count":3},{"cell_type":"code","source":"test_csv = pd.read_csv(\"/kaggle/input/neurips-open-polymer-prediction-2025/test.csv\")\ntest_csv","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-21T05:40:49.922228Z","iopub.execute_input":"2025-08-21T05:40:49.922546Z","iopub.status.idle":"2025-08-21T05:40:49.949967Z","shell.execute_reply.started":"2025-08-21T05:40:49.922517Z","shell.execute_reply":"2025-08-21T05:40:49.949023Z"}},"outputs":[{"execution_count":4,"output_type":"execute_result","data":{"text/plain":"           id                                             SMILES\n0  1109053969  *Oc1ccc(C=NN=Cc2ccc(Oc3ccc(C(c4ccc(*)cc4)(C(F)...\n1  1422188626  *Oc1ccc(C(C)(C)c2ccc(Oc3ccc(C(=O)c4cccc(C(=O)c...\n2  2032016830  *c1cccc(OCCCCCCCCOc2cccc(N3C(=O)c4ccc(-c5cccc6...","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>SMILES</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1109053969</td>\n      <td>*Oc1ccc(C=NN=Cc2ccc(Oc3ccc(C(c4ccc(*)cc4)(C(F)...</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1422188626</td>\n      <td>*Oc1ccc(C(C)(C)c2ccc(Oc3ccc(C(=O)c4cccc(C(=O)c...</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2032016830</td>\n      <td>*c1cccc(OCCCCCCCCOc2cccc(N3C(=O)c4ccc(-c5cccc6...</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":4},{"cell_type":"code","source":"Tc_extra = pd.read_csv(\"/kaggle/input/neurips-open-polymer-prediction-2025/train_supplement/dataset1.csv\")\ntest2 = pd.read_csv(\"/kaggle/input/neurips-open-polymer-prediction-2025/train_supplement/dataset2.csv\")\nTg_extra = pd.read_csv(\"/kaggle/input/neurips-open-polymer-prediction-2025/train_supplement/dataset3.csv\")\nFFV_extra = pd.read_csv(\"/kaggle/input/neurips-open-polymer-prediction-2025/train_supplement/dataset4.csv\")\n\nTc_extra.rename(columns={\"TC_mean\": \"Tc\"}, inplace=True)\nTc_extra","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-21T05:40:49.950940Z","iopub.execute_input":"2025-08-21T05:40:49.951279Z","iopub.status.idle":"2025-08-21T05:40:50.005618Z","shell.execute_reply.started":"2025-08-21T05:40:49.951249Z","shell.execute_reply":"2025-08-21T05:40:50.004737Z"}},"outputs":[{"execution_count":5,"output_type":"execute_result","data":{"text/plain":"                                                SMILES      Tc\n0                */C(=C(\\c1ccccc1)c1ccc(*)cc1)c1ccccc1  0.3380\n1                   */C(F)=C(\\F)C(F)(C(*)(F)F)C(F)(F)F  0.1020\n2               */C=C(/*)C#CCCCCCCCCCCCCCCCCCCCCC(=O)O  0.4105\n3                  */C=C(/*)CCCCCCCCCCCCCCCCCCCCC(=O)O  0.4030\n4                                              */C=C/*  0.5260\n..                                                 ...     ...\n869            CCNC(=O)OCCCCC(*)=C=C=C(*)CCCCOC(=O)NCC  0.2600\n870  Cc1ccc(cc1)S(=O)(=O)OCCCCC(*)=C=C=C(*)CCCCOS(=...  0.2100\n871  FC(F)(F)C(C1=CC2=C(OC(=N2)C2=CC=C(OC3=C4C5C6=C...  0.1090\n872  FC(F)(F)C(C1=CC2=C(OC(=N2)C2=CC=C(OC3=C4C5C6=C...  0.1760\n873  FC(F)(F)C(C1=CC2=C(OC(=N2)C2=CC=C(OC3=CC=C(OC4...  0.1550\n\n[874 rows x 2 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>SMILES</th>\n      <th>Tc</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>*/C(=C(\\c1ccccc1)c1ccc(*)cc1)c1ccccc1</td>\n      <td>0.3380</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>*/C(F)=C(\\F)C(F)(C(*)(F)F)C(F)(F)F</td>\n      <td>0.1020</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>*/C=C(/*)C#CCCCCCCCCCCCCCCCCCCCCC(=O)O</td>\n      <td>0.4105</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>*/C=C(/*)CCCCCCCCCCCCCCCCCCCCC(=O)O</td>\n      <td>0.4030</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>*/C=C/*</td>\n      <td>0.5260</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>869</th>\n      <td>CCNC(=O)OCCCCC(*)=C=C=C(*)CCCCOC(=O)NCC</td>\n      <td>0.2600</td>\n    </tr>\n    <tr>\n      <th>870</th>\n      <td>Cc1ccc(cc1)S(=O)(=O)OCCCCC(*)=C=C=C(*)CCCCOS(=...</td>\n      <td>0.2100</td>\n    </tr>\n    <tr>\n      <th>871</th>\n      <td>FC(F)(F)C(C1=CC2=C(OC(=N2)C2=CC=C(OC3=C4C5C6=C...</td>\n      <td>0.1090</td>\n    </tr>\n    <tr>\n      <th>872</th>\n      <td>FC(F)(F)C(C1=CC2=C(OC(=N2)C2=CC=C(OC3=C4C5C6=C...</td>\n      <td>0.1760</td>\n    </tr>\n    <tr>\n      <th>873</th>\n      <td>FC(F)(F)C(C1=CC2=C(OC(=N2)C2=CC=C(OC3=CC=C(OC4...</td>\n      <td>0.1550</td>\n    </tr>\n  </tbody>\n</table>\n<p>874 rows × 2 columns</p>\n</div>"},"metadata":{}}],"execution_count":5},{"cell_type":"code","source":"from rdkit import Chem\nfrom rdkit.Chem import Descriptors, AllChem, rdMolDescriptors\nfrom rdkit import DataStructs\nimport numpy as np\n\ndef smiles_to_features(smiles, fp_size=1024, radius=2):\n    \"\"\"\n    Convert SMILES to feature vector:\n    - 18 descriptors (cleaned for NaN/inf)\n    - ECFP fingerprint\n    - Returns fixed length vector (18 + fp_size)\n    \"\"\"\n    try:\n        mol = Chem.MolFromSmiles(smiles)\n        if mol is None:\n            raise ValueError(\"Invalid SMILES\")\n\n        # 1. Extended descriptor set (18 features)\n        desc_list = [\n            Descriptors.MolWt(mol),                     \n            Descriptors.MolLogP(mol),                   \n            Descriptors.TPSA(mol),                      \n            Descriptors.NumRotatableBonds(mol),\n            Descriptors.NumHDonors(mol),\n            Descriptors.NumHAcceptors(mol),\n            Descriptors.RingCount(mol),\n            Descriptors.HeavyAtomCount(mol),            \n            Descriptors.FractionCSP3(mol),              \n            Descriptors.NumAliphaticRings(mol),\n            Descriptors.NumAromaticRings(mol),\n            Descriptors.LabuteASA(mol),                 \n            Descriptors.MolMR(mol),                     \n            Descriptors.NumValenceElectrons(mol),\n            Descriptors.MaxPartialCharge(mol),\n            Descriptors.MinPartialCharge(mol),\n            Descriptors.BalabanJ(mol),                  \n            Descriptors.BertzCT(mol)\n        ]\n\n        desc_list = [0.0 if (np.isnan(x) or np.isinf(x)) else x for x in desc_list]\n\n        # 2. ECFP fingerprint\n        fp = AllChem.GetMorganFingerprintAsBitVect(mol, radius=radius, nBits=fp_size)\n        fp_arr = np.zeros((fp_size,), dtype=int)\n        DataStructs.ConvertToNumpyArray(fp, fp_arr)\n\n        # 3. Concatenate\n        return np.concatenate([np.array(desc_list, dtype=float), fp_arr])\n\n    except Exception:\n        return np.zeros(fp_size + 18, dtype=float)\n\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-21T07:19:34.892625Z","iopub.execute_input":"2025-08-21T07:19:34.892976Z","iopub.status.idle":"2025-08-21T07:19:34.902728Z","shell.execute_reply.started":"2025-08-21T07:19:34.892948Z","shell.execute_reply":"2025-08-21T07:19:34.901676Z"}},"outputs":[],"execution_count":230},{"cell_type":"code","source":"import pandas as pd\nimport numpy as np\nfrom rdkit import Chem\nfrom rdkit.Chem import Descriptors, AllChem, DataStructs\nfrom xgboost import XGBRegressor\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_absolute_error\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-21T07:19:35.747036Z","iopub.execute_input":"2025-08-21T07:19:35.747348Z","iopub.status.idle":"2025-08-21T07:19:35.752357Z","shell.execute_reply.started":"2025-08-21T07:19:35.747324Z","shell.execute_reply":"2025-08-21T07:19:35.751288Z"}},"outputs":[],"execution_count":231},{"cell_type":"code","source":"# input_ids.shape","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-21T05:40:57.591536Z","iopub.execute_input":"2025-08-21T05:40:57.592117Z","iopub.status.idle":"2025-08-21T05:40:57.596638Z","shell.execute_reply.started":"2025-08-21T05:40:57.592080Z","shell.execute_reply":"2025-08-21T05:40:57.595681Z"}},"outputs":[],"execution_count":9},{"cell_type":"code","source":"non_null_count = train_csv['FFV'].notnull().sum()\nprint(non_null_count) ","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-21T05:40:57.755355Z","iopub.execute_input":"2025-08-21T05:40:57.755647Z","iopub.status.idle":"2025-08-21T05:40:57.761950Z","shell.execute_reply.started":"2025-08-21T05:40:57.755627Z","shell.execute_reply":"2025-08-21T05:40:57.760969Z"}},"outputs":[{"name":"stdout","text":"7030\n","output_type":"stream"}],"execution_count":10},{"cell_type":"code","source":"features = ['SMILES','FFV']\nFFV_train_ = train_csv[train_csv['FFV'].notnull()][features].copy()\n\nfeatures = ['SMILES','Tg']\nTg_train_ = train_csv[train_csv['Tg'].notnull()][features].copy()\n\nfeatures = ['SMILES','Tc']\nTc_train_ = train_csv[train_csv['Tc'].notnull()][features].copy()\n\nfeatures = ['SMILES','Density']\nDensity_train = train_csv[train_csv['Density'].notnull()][features].copy()\n\nfeatures = ['SMILES','Rg']\nRg_train = train_csv[train_csv['Rg'].notnull()][features].copy()\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-21T07:19:39.008497Z","iopub.execute_input":"2025-08-21T07:19:39.008881Z","iopub.status.idle":"2025-08-21T07:19:39.025808Z","shell.execute_reply.started":"2025-08-21T07:19:39.008851Z","shell.execute_reply":"2025-08-21T07:19:39.024809Z"}},"outputs":[],"execution_count":232},{"cell_type":"code","source":"Tc_train_","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-21T07:19:39.683016Z","iopub.execute_input":"2025-08-21T07:19:39.683336Z","iopub.status.idle":"2025-08-21T07:19:39.694542Z","shell.execute_reply.started":"2025-08-21T07:19:39.683311Z","shell.execute_reply":"2025-08-21T07:19:39.693631Z"}},"outputs":[{"execution_count":233,"output_type":"execute_result","data":{"text/plain":"                                                 SMILES        Tc\n0                            *CC(*)c1ccccc1C(=O)OCCCCCC  0.205667\n10    *c1ccc(-c2ccc3c(c2)C(CCCCCCC#N)(CCCCCCC#N)c2cc...  0.487000\n11                       *CC(*)c1ccc(C(=O)O)c(C(=O)O)c1  0.171000\n31                              *CCCCCNC(=O)CCCCC(=O)N*  0.327000\n34             *CCCCCCCCCCCCCCCCCCNC(=O)NCCCCCCNC(=O)N*  0.383000\n...                                                 ...       ...\n7899                        *CCN(*)C(=O)CCCCCCCCCCCCCCC  0.336000\n7905                                    *CC(*)c1ccccc1F  0.174667\n7943                                    *CC(*)C1CC=CCC1  0.180750\n7944                                           *CC(*)Cl  0.139000\n7952                  *CCCC(=O)NCc1ccc(CNC(=O)CCCO*)cc1  0.259000\n\n[737 rows x 2 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>SMILES</th>\n      <th>Tc</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>*CC(*)c1ccccc1C(=O)OCCCCCC</td>\n      <td>0.205667</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>*c1ccc(-c2ccc3c(c2)C(CCCCCCC#N)(CCCCCCC#N)c2cc...</td>\n      <td>0.487000</td>\n    </tr>\n    <tr>\n      <th>11</th>\n      <td>*CC(*)c1ccc(C(=O)O)c(C(=O)O)c1</td>\n      <td>0.171000</td>\n    </tr>\n    <tr>\n      <th>31</th>\n      <td>*CCCCCNC(=O)CCCCC(=O)N*</td>\n      <td>0.327000</td>\n    </tr>\n    <tr>\n      <th>34</th>\n      <td>*CCCCCCCCCCCCCCCCCCNC(=O)NCCCCCCNC(=O)N*</td>\n      <td>0.383000</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>7899</th>\n      <td>*CCN(*)C(=O)CCCCCCCCCCCCCCC</td>\n      <td>0.336000</td>\n    </tr>\n    <tr>\n      <th>7905</th>\n      <td>*CC(*)c1ccccc1F</td>\n      <td>0.174667</td>\n    </tr>\n    <tr>\n      <th>7943</th>\n      <td>*CC(*)C1CC=CCC1</td>\n      <td>0.180750</td>\n    </tr>\n    <tr>\n      <th>7944</th>\n      <td>*CC(*)Cl</td>\n      <td>0.139000</td>\n    </tr>\n    <tr>\n      <th>7952</th>\n      <td>*CCCC(=O)NCc1ccc(CNC(=O)CCCO*)cc1</td>\n      <td>0.259000</td>\n    </tr>\n  </tbody>\n</table>\n<p>737 rows × 2 columns</p>\n</div>"},"metadata":{}}],"execution_count":233},{"cell_type":"code","source":"FFV_train = pd.concat([FFV_train_, FFV_extra], ignore_index = True)\nTg_train = pd.concat([Tg_train_, Tg_extra], ignore_index = True)\nTc_train = pd.concat([Tc_train_, Tc_extra], ignore_index = True)\nprint(FFV_train.shape)\nprint(Tg_train.shape)\nprint(Tc_train.shape)\nprint(Density_train.shape)\nprint(Rg_train.shape)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-21T07:19:41.013973Z","iopub.execute_input":"2025-08-21T07:19:41.014652Z","iopub.status.idle":"2025-08-21T07:19:41.022817Z","shell.execute_reply.started":"2025-08-21T07:19:41.014621Z","shell.execute_reply":"2025-08-21T07:19:41.021672Z"}},"outputs":[{"name":"stdout","text":"(7892, 2)\n(557, 2)\n(1611, 2)\n(613, 2)\n(614, 2)\n","output_type":"stream"}],"execution_count":234},{"cell_type":"code","source":"# Example: build X and y\nX = []\ny = []\n\nfor smi, target in zip(FFV_train[\"SMILES\"], FFV_train[\"FFV\"]):\n    feats = smiles_to_features(smi)\n    if feats is not None:\n        X.append(feats)\n        y.append(target)\n\nX = np.array(X)\ny = np.array(y)\n\nprint(\"Feature matrix shape:\", X.shape)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-21T07:22:01.859232Z","iopub.execute_input":"2025-08-21T07:22:01.859554Z","iopub.status.idle":"2025-08-21T07:22:47.381146Z","shell.execute_reply.started":"2025-08-21T07:22:01.859527Z","shell.execute_reply":"2025-08-21T07:22:47.380136Z"}},"outputs":[{"name":"stdout","text":"Feature matrix shape: (7892, 1042)\n","output_type":"stream"}],"execution_count":238},{"cell_type":"code","source":"from sklearn.model_selection import train_test_split\nY = FFV_train['FFV'].values\nX_train_FFV, X_test_FFV, Y_train_FFV, Y_test_FFV = train_test_split(X, Y, test_size=0.2, random_state=42, shuffle=True)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-21T07:20:43.192150Z","iopub.execute_input":"2025-08-21T07:20:43.192894Z","iopub.status.idle":"2025-08-21T07:20:43.221959Z","shell.execute_reply.started":"2025-08-21T07:20:43.192866Z","shell.execute_reply":"2025-08-21T07:20:43.221103Z"}},"outputs":[],"execution_count":236},{"cell_type":"code","source":"#Trying XGBOOST\nimport xgboost as xgb\nfrom sklearn.metrics import mean_absolute_error\nmodel_FFV = xgb.XGBRegressor(\n    n_estimators=3500,\n    learning_rate=0.04,\n    max_depth=9,\n    subsample=0.7,\n    colsample_bytree=0.5634168569532054,\n    reg_lambda=2,    \n    reg_alpha=0.01,   \n    random_state=42,\n    tree_method=\"hist\"\n)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-21T05:43:28.390704Z","iopub.execute_input":"2025-08-21T05:43:28.391233Z","iopub.status.idle":"2025-08-21T05:43:28.398283Z","shell.execute_reply.started":"2025-08-21T05:43:28.391197Z","shell.execute_reply":"2025-08-21T05:43:28.397170Z"}},"outputs":[],"execution_count":16},{"cell_type":"code","source":"model_FFV.fit(\n    X_train_FFV, Y_train_FFV,\n    eval_set=[(X_test_FFV, Y_test_FFV)],\n    eval_metric=\"mae\",\n    early_stopping_rounds=50,\n    verbose=50\n)\nY_pred_FFV = model_FFV.predict(X_test_FFV)\nprint(\"Validation MAE:\", mean_absolute_error(Y_test_FFV, Y_pred_FFV))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-21T05:43:30.451716Z","iopub.execute_input":"2025-08-21T05:43:30.452094Z","iopub.status.idle":"2025-08-21T05:44:27.659885Z","shell.execute_reply.started":"2025-08-21T05:43:30.452068Z","shell.execute_reply":"2025-08-21T05:44:27.658850Z"}},"outputs":[{"name":"stderr","text":"/usr/local/lib/python3.11/dist-packages/xgboost/sklearn.py:889: UserWarning: `eval_metric` in `fit` method is deprecated for better compatibility with scikit-learn, use `eval_metric` in constructor or`set_params` instead.\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/xgboost/sklearn.py:889: UserWarning: `early_stopping_rounds` in `fit` method is deprecated for better compatibility with scikit-learn, use `early_stopping_rounds` in constructor or`set_params` instead.\n  warnings.warn(\n","output_type":"stream"},{"name":"stdout","text":"[0]\tvalidation_0-mae:0.02011\n[50]\tvalidation_0-mae:0.00897\n[100]\tvalidation_0-mae:0.00729\n[150]\tvalidation_0-mae:0.00679\n[200]\tvalidation_0-mae:0.00646\n[250]\tvalidation_0-mae:0.00628\n[300]\tvalidation_0-mae:0.00615\n[350]\tvalidation_0-mae:0.00604\n[400]\tvalidation_0-mae:0.00595\n[450]\tvalidation_0-mae:0.00588\n[500]\tvalidation_0-mae:0.00583\n[550]\tvalidation_0-mae:0.00578\n[600]\tvalidation_0-mae:0.00574\n[650]\tvalidation_0-mae:0.00570\n[700]\tvalidation_0-mae:0.00567\n[750]\tvalidation_0-mae:0.00564\n[800]\tvalidation_0-mae:0.00562\n[850]\tvalidation_0-mae:0.00561\n[900]\tvalidation_0-mae:0.00560\n[950]\tvalidation_0-mae:0.00558\n[1000]\tvalidation_0-mae:0.00557\n[1050]\tvalidation_0-mae:0.00556\n[1100]\tvalidation_0-mae:0.00555\n[1150]\tvalidation_0-mae:0.00555\n[1200]\tvalidation_0-mae:0.00554\n[1250]\tvalidation_0-mae:0.00554\n[1300]\tvalidation_0-mae:0.00553\n[1350]\tvalidation_0-mae:0.00552\n[1400]\tvalidation_0-mae:0.00552\n[1450]\tvalidation_0-mae:0.00552\n[1500]\tvalidation_0-mae:0.00551\n[1550]\tvalidation_0-mae:0.00551\n[1600]\tvalidation_0-mae:0.00551\n[1650]\tvalidation_0-mae:0.00551\n[1700]\tvalidation_0-mae:0.00551\n[1750]\tvalidation_0-mae:0.00550\n[1800]\tvalidation_0-mae:0.00550\n[1850]\tvalidation_0-mae:0.00550\n[1900]\tvalidation_0-mae:0.00550\n[1950]\tvalidation_0-mae:0.00550\n[2000]\tvalidation_0-mae:0.00549\n[2050]\tvalidation_0-mae:0.00549\n[2080]\tvalidation_0-mae:0.00549\nValidation MAE: 0.005493639446635377\n","output_type":"stream"}],"execution_count":17},{"cell_type":"code","source":"# import optuna\n# from sklearn.metrics import mean_absolute_error\n# import xgboost as xgb\n\n# def objective(trial):\n#     # Suggest hyperparameters\n#     params = {\n#         \"n_estimators\": trial.suggest_categorical(\"n_estimators\", [2500,3000,3250,3500]),\n#         \"max_depth\": trial.suggest_categorical(\"max_depth\", [5,6,7,8,9,10]),\n#         \"learning_rate\": trial.suggest_categorical(\"learning_rate\", [0.04, 0.05, 0.06, 0.07]),\n#         \"subsample\": trial.suggest_categorical(\"subsample\", [0.7, 0.8, 0.9]),\n#         \"colsample_bytree\": trial.suggest_uniform(\"colsample_bytree\", 0.5, 1.0),\n#         \"gamma\": trial.suggest_categorical(\"gamma\", [0, 0.1, 0.3, 1]),\n#         \"reg_alpha\": trial.suggest_categorical(\"reg_alpha\", [0, 0.01, 0.1]),\n#         \"reg_lambda\": trial.suggest_categorical(\"reg_lambda\", [1, 1.5, 2]),\n#         \"objective\": \"reg:squarederror\",\n#         \"eval_metric\": \"mae\",\n#         \"tree_method\": \"hist\",   # use \"gpu_hist\" if GPU is available\n#     }\n\n#     # Train model\n#     model = xgb.XGBRegressor(**params)\n#     model.fit(\n#         X_train_FFV, Y_train_FFV,\n#         eval_set=[(X_test_FFV, Y_test_FFV)],\n#         early_stopping_rounds=50,\n#         verbose=False\n#     )\n\n#     # Predict\n#     preds = model.predict(X_test_FFV)\n#     mae = mean_absolute_error(Y_test_FFV, preds)\n#     return mae\n\n# # Run optimization\n# study = optuna.create_study(direction=\"minimize\")\n# study.optimize(objective, n_trials=50)\n\n# print(\"Best params:\", study.best_params)\n# print(\"Best MAE:\", study.best_value)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-21T06:17:21.454904Z","iopub.execute_input":"2025-08-21T06:17:21.455312Z","iopub.status.idle":"2025-08-21T06:17:21.460530Z","shell.execute_reply.started":"2025-08-21T06:17:21.455286Z","shell.execute_reply":"2025-08-21T06:17:21.459629Z"}},"outputs":[],"execution_count":94},{"cell_type":"code","source":"X_sub = []\n\nfor smi in test_csv[\"SMILES\"]:\n    feats = smiles_to_features(smi)\n    if feats is not None:\n        X_sub.append(feats)\n\nX_sub = np.array(X_sub)\n\nprint(\"sub matrix shape:\", X_sub.shape)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-21T06:17:27.562455Z","iopub.execute_input":"2025-08-21T06:17:27.562752Z","iopub.status.idle":"2025-08-21T06:17:27.591987Z","shell.execute_reply.started":"2025-08-21T06:17:27.562732Z","shell.execute_reply":"2025-08-21T06:17:27.590994Z"}},"outputs":[{"name":"stdout","text":"sub matrix shape: (3, 1042)\n","output_type":"stream"}],"execution_count":95},{"cell_type":"code","source":"Y_FFV_sub = model_FFV.predict(X_sub)\nY_FFV_sub","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-21T06:17:38.899110Z","iopub.execute_input":"2025-08-21T06:17:38.900056Z","iopub.status.idle":"2025-08-21T06:17:38.911562Z","shell.execute_reply.started":"2025-08-21T06:17:38.900019Z","shell.execute_reply":"2025-08-21T06:17:38.910813Z"}},"outputs":[{"execution_count":96,"output_type":"execute_result","data":{"text/plain":"array([0.37124604, 0.37583894, 0.3500858 ], dtype=float32)"},"metadata":{}}],"execution_count":96},{"cell_type":"code","source":"from rdkit import Chem\nfrom rdkit.Chem import Descriptors, AllChem, rdMolDescriptors\nfrom rdkit import DataStructs\nimport numpy as np\n\ndef smiles_to_Tg_features(smiles, fp_size=1024, radius=2):\n    \n    try:\n        mol = Chem.MolFromSmiles(smiles)\n        if mol is None:\n            raise ValueError(\"Invalid SMILES\")\n\n        # Tg-related molecular descriptors\n        desc_list = [\n            Descriptors.MolWt(mol),                     \n            Descriptors.MolLogP(mol),                   \n            Descriptors.TPSA(mol),                      \n            Descriptors.NumRotatableBonds(mol),         \n            Descriptors.NumHDonors(mol),                \n            Descriptors.NumHAcceptors(mol),             \n            Descriptors.RingCount(mol),                 \n            Descriptors.HeavyAtomCount(mol),            \n            Descriptors.FractionCSP3(mol),              \n            Descriptors.NumAliphaticRings(mol),         \n            Descriptors.NumAromaticRings(mol),          \n            Descriptors.LabuteASA(mol),                 \n            rdMolDescriptors.CalcChi0n(mol),            \n            rdMolDescriptors.CalcKappa2(mol),           \n            rdMolDescriptors.CalcNumLipinskiHBA(mol),   \n        ]\n\n        # Fingerprint (ECFP)\n        fp = AllChem.GetMorganFingerprintAsBitVect(mol, radius=radius, nBits=fp_size)\n        fp_arr = np.zeros((fp_size,), dtype=int)\n        DataStructs.ConvertToNumpyArray(fp, fp_arr)\n\n        return np.concatenate([np.array(desc_list, dtype=float), fp_arr])\n\n    except Exception:\n        return np.zeros(fp_size + 15, dtype=float)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-21T07:17:50.986625Z","iopub.execute_input":"2025-08-21T07:17:50.987025Z","iopub.status.idle":"2025-08-21T07:17:50.995282Z","shell.execute_reply.started":"2025-08-21T07:17:50.986995Z","shell.execute_reply":"2025-08-21T07:17:50.994397Z"}},"outputs":[],"execution_count":227},{"cell_type":"code","source":"X_Tg = []\nY_Tg = []\n\nfor smi, target in zip(Tg_train[\"SMILES\"], Tg_train[\"Tg\"]):\n    feats = smiles_to_Tg_features(smi)\n    if feats is not None:\n        X_Tg.append(feats)\n        Y_Tg.append(target)\n\nX_Tg = np.array(X_Tg)\nY_Tg = np.array(Y_Tg)\n\nprint(\"Feature matrix shape:\", X_Tg.shape)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-21T07:17:54.423442Z","iopub.execute_input":"2025-08-21T07:17:54.424225Z","iopub.status.idle":"2025-08-21T07:17:55.156720Z","shell.execute_reply.started":"2025-08-21T07:17:54.424193Z","shell.execute_reply":"2025-08-21T07:17:55.155849Z"}},"outputs":[{"name":"stdout","text":"Feature matrix shape: (557, 1039)\n","output_type":"stream"}],"execution_count":228},{"cell_type":"code","source":"#Trying XGBOOST\nimport xgboost as xgb\nfrom sklearn.metrics import mean_absolute_error\nmodel_Tg = xgb.XGBRegressor(\n    n_estimators=1500,\n    learning_rate=0.05,\n    max_depth=7,\n    subsample=0.8,\n    colsample_bytree=0.8,\n    reg_lambda=1,    \n    reg_alpha=0.12,   \n    random_state=42,\n    tree_method=\"hist\"\n)\nY_Tg = Tg_train['Tg'].values\nX_train_Tg, X_test_Tg, Y_train_Tg, Y_test_Tg = train_test_split(X_Tg, Y_Tg, test_size=0.2, random_state=42,shuffle=True)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-21T06:20:09.479050Z","iopub.execute_input":"2025-08-21T06:20:09.479368Z","iopub.status.idle":"2025-08-21T06:20:09.487129Z","shell.execute_reply.started":"2025-08-21T06:20:09.479344Z","shell.execute_reply":"2025-08-21T06:20:09.486160Z"}},"outputs":[],"execution_count":99},{"cell_type":"code","source":"model_Tg.fit(\n    X_train_Tg, Y_train_Tg,\n    eval_set=[(X_test_Tg, Y_test_Tg)],\n    eval_metric=\"mae\",\n    early_stopping_rounds=50,\n    verbose=50\n)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-21T06:20:12.304699Z","iopub.execute_input":"2025-08-21T06:20:12.305040Z","iopub.status.idle":"2025-08-21T06:20:12.933519Z","shell.execute_reply.started":"2025-08-21T06:20:12.305017Z","shell.execute_reply":"2025-08-21T06:20:12.932851Z"}},"outputs":[{"name":"stdout","text":"[0]\tvalidation_0-mae:82.62844\n","output_type":"stream"},{"name":"stderr","text":"/usr/local/lib/python3.11/dist-packages/xgboost/sklearn.py:889: UserWarning: `eval_metric` in `fit` method is deprecated for better compatibility with scikit-learn, use `eval_metric` in constructor or`set_params` instead.\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/xgboost/sklearn.py:889: UserWarning: `early_stopping_rounds` in `fit` method is deprecated for better compatibility with scikit-learn, use `early_stopping_rounds` in constructor or`set_params` instead.\n  warnings.warn(\n","output_type":"stream"},{"name":"stdout","text":"[50]\tvalidation_0-mae:54.96365\n[100]\tvalidation_0-mae:55.01184\n[109]\tvalidation_0-mae:54.93552\n","output_type":"stream"},{"execution_count":100,"output_type":"execute_result","data":{"text/plain":"XGBRegressor(base_score=None, booster=None, callbacks=None,\n             colsample_bylevel=None, colsample_bynode=None,\n             colsample_bytree=0.8, device=None, early_stopping_rounds=None,\n             enable_categorical=False, eval_metric=None, feature_types=None,\n             gamma=None, grow_policy=None, importance_type=None,\n             interaction_constraints=None, learning_rate=0.05, max_bin=None,\n             max_cat_threshold=None, max_cat_to_onehot=None,\n             max_delta_step=None, max_depth=7, max_leaves=None,\n             min_child_weight=None, missing=nan, monotone_constraints=None,\n             multi_strategy=None, n_estimators=1500, n_jobs=None,\n             num_parallel_tree=None, random_state=42, ...)","text/html":"<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>XGBRegressor(base_score=None, booster=None, callbacks=None,\n             colsample_bylevel=None, colsample_bynode=None,\n             colsample_bytree=0.8, device=None, early_stopping_rounds=None,\n             enable_categorical=False, eval_metric=None, feature_types=None,\n             gamma=None, grow_policy=None, importance_type=None,\n             interaction_constraints=None, learning_rate=0.05, max_bin=None,\n             max_cat_threshold=None, max_cat_to_onehot=None,\n             max_delta_step=None, max_depth=7, max_leaves=None,\n             min_child_weight=None, missing=nan, monotone_constraints=None,\n             multi_strategy=None, n_estimators=1500, n_jobs=None,\n             num_parallel_tree=None, random_state=42, ...)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">XGBRegressor</label><div class=\"sk-toggleable__content\"><pre>XGBRegressor(base_score=None, booster=None, callbacks=None,\n             colsample_bylevel=None, colsample_bynode=None,\n             colsample_bytree=0.8, device=None, early_stopping_rounds=None,\n             enable_categorical=False, eval_metric=None, feature_types=None,\n             gamma=None, grow_policy=None, importance_type=None,\n             interaction_constraints=None, learning_rate=0.05, max_bin=None,\n             max_cat_threshold=None, max_cat_to_onehot=None,\n             max_delta_step=None, max_depth=7, max_leaves=None,\n             min_child_weight=None, missing=nan, monotone_constraints=None,\n             multi_strategy=None, n_estimators=1500, n_jobs=None,\n             num_parallel_tree=None, random_state=42, ...)</pre></div></div></div></div></div>"},"metadata":{}}],"execution_count":100},{"cell_type":"code","source":"Y_pred_Tg = model_Tg.predict(X_test_Tg)\nprint(\"Validation MAE:\", mean_absolute_error(Y_test_Tg, Y_pred_Tg))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-21T06:20:17.366323Z","iopub.execute_input":"2025-08-21T06:20:17.366646Z","iopub.status.idle":"2025-08-21T06:20:17.375578Z","shell.execute_reply.started":"2025-08-21T06:20:17.366622Z","shell.execute_reply":"2025-08-21T06:20:17.374929Z"}},"outputs":[{"name":"stdout","text":"Validation MAE: 54.6660267042521\n","output_type":"stream"}],"execution_count":101},{"cell_type":"code","source":"from rdkit import Chem\nfrom rdkit.Chem import Descriptors, AllChem\nimport numpy as np\n\ndef smiles_to_Tc_features_safe(smiles, fp_radius=2, fp_bits=512):\n    \n    try:\n        mol = Chem.MolFromSmiles(smiles)\n        if mol is None:\n            raise ValueError(\"Invalid SMILES\")\n\n        # Basic physico-chemical descriptors\n        mol_wt = Descriptors.MolWt(mol)\n        logp = Descriptors.MolLogP(mol)\n        tpsa = Descriptors.TPSA(mol)\n        rot_bonds = Descriptors.NumRotatableBonds(mol)\n        h_donors = Descriptors.NumHDonors(mol)\n        h_acceptors = Descriptors.NumHAcceptors(mol)\n        aromatic_proportion = sum(atom.GetIsAromatic() for atom in mol.GetAtoms()) / (mol.GetNumAtoms() + 1e-6)\n\n        # Connectivity / topology\n        balaban_j = Descriptors.BalabanJ(mol)\n        chi0 = Descriptors.Chi0(mol)\n        chi1 = Descriptors.Chi1(mol)\n        chi2 = Descriptors.Chi2n(mol)\n\n        # Fingerprint\n        fp = AllChem.GetMorganFingerprintAsBitVect(mol, radius=fp_radius, nBits=fp_bits)\n        fp_arr = np.array(fp)\n\n        # Combine descriptors\n        features = np.array([\n            mol_wt, logp, tpsa, rot_bonds,\n            h_donors, h_acceptors, aromatic_proportion,\n            balaban_j, chi0, chi1, chi2\n        ])\n\n        return np.concatenate([features, fp_arr])\n\n    except Exception:\n        return np.zeros(11 + fp_bits)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-21T07:15:48.215729Z","iopub.execute_input":"2025-08-21T07:15:48.216125Z","iopub.status.idle":"2025-08-21T07:15:48.225054Z","shell.execute_reply.started":"2025-08-21T07:15:48.216098Z","shell.execute_reply":"2025-08-21T07:15:48.224086Z"}},"outputs":[],"execution_count":225},{"cell_type":"code","source":"X_Tc = []\nY_Tc = []\n\nfor smi, target in zip(Tc_train[\"SMILES\"], Tc_train[\"Tc\"]):\n    feats = smiles_to_Tc_features(smi)\n    if feats is not None:\n        X_Tc.append(feats)\n        Y_Tc.append(target)\n\nX_Tc = np.array(X_Tc)\nY_Tc = np.array(Y_Tc)\n\nprint(\"Feature matrix shape:\", X_Tc.shape)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-21T07:15:51.070601Z","iopub.execute_input":"2025-08-21T07:15:51.071241Z","iopub.status.idle":"2025-08-21T07:15:55.089902Z","shell.execute_reply.started":"2025-08-21T07:15:51.071212Z","shell.execute_reply":"2025-08-21T07:15:55.089066Z"}},"outputs":[{"name":"stdout","text":"Feature matrix shape: (1611, 523)\n","output_type":"stream"}],"execution_count":226},{"cell_type":"code","source":"#Trying XGBOOST\n\nmodel_Tc = xgb.XGBRegressor(\n    n_estimators=3500,\n    learning_rate=0.06,\n    max_depth=12,\n    subsample=0.8,\n    colsample_bytree=0.8,\n    reg_lambda=1.3,    \n    reg_alpha=0.04,   \n    random_state=42,\n    tree_method=\"hist\"\n)\n\nY_Tc = Tc_train['Tc'].values\nX_train_Tc, X_test_Tc, Y_train_Tc, Y_test_Tc = train_test_split(X_Tc, Y_Tc, test_size=0.2, random_state=42,shuffle=True)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-21T06:37:36.149876Z","iopub.execute_input":"2025-08-21T06:37:36.150245Z","iopub.status.idle":"2025-08-21T06:37:36.160238Z","shell.execute_reply.started":"2025-08-21T06:37:36.150217Z","shell.execute_reply":"2025-08-21T06:37:36.159339Z"}},"outputs":[],"execution_count":163},{"cell_type":"code","source":"model_Tc.fit(\n    X_train_Tc, Y_train_Tc,\n    eval_set=[(X_test_Tc, Y_test_Tc)],\n    eval_metric=\"mae\",\n    early_stopping_rounds=50,\n    verbose=50\n)\nY_pred_Tc = model_Tc.predict(X_test_Tc)\nprint(\"Validation MAE:\", mean_absolute_error(Y_test_Tc, Y_pred_Tc))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-21T06:37:37.055749Z","iopub.execute_input":"2025-08-21T06:37:37.056113Z","iopub.status.idle":"2025-08-21T06:37:49.894475Z","shell.execute_reply.started":"2025-08-21T06:37:37.056087Z","shell.execute_reply":"2025-08-21T06:37:49.893738Z"}},"outputs":[{"name":"stdout","text":"[0]\tvalidation_0-mae:0.07090\n","output_type":"stream"},{"name":"stderr","text":"/usr/local/lib/python3.11/dist-packages/xgboost/sklearn.py:889: UserWarning: `eval_metric` in `fit` method is deprecated for better compatibility with scikit-learn, use `eval_metric` in constructor or`set_params` instead.\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/xgboost/sklearn.py:889: UserWarning: `early_stopping_rounds` in `fit` method is deprecated for better compatibility with scikit-learn, use `early_stopping_rounds` in constructor or`set_params` instead.\n  warnings.warn(\n","output_type":"stream"},{"name":"stdout","text":"[50]\tvalidation_0-mae:0.01930\n[100]\tvalidation_0-mae:0.01535\n[150]\tvalidation_0-mae:0.01405\n[200]\tvalidation_0-mae:0.01333\n[250]\tvalidation_0-mae:0.01282\n[300]\tvalidation_0-mae:0.01247\n[350]\tvalidation_0-mae:0.01221\n[400]\tvalidation_0-mae:0.01202\n[450]\tvalidation_0-mae:0.01189\n[500]\tvalidation_0-mae:0.01179\n[550]\tvalidation_0-mae:0.01167\n[600]\tvalidation_0-mae:0.01157\n[650]\tvalidation_0-mae:0.01150\n[700]\tvalidation_0-mae:0.01145\n[750]\tvalidation_0-mae:0.01139\n[800]\tvalidation_0-mae:0.01135\n[850]\tvalidation_0-mae:0.01129\n[900]\tvalidation_0-mae:0.01125\n[950]\tvalidation_0-mae:0.01121\n[1000]\tvalidation_0-mae:0.01118\n[1050]\tvalidation_0-mae:0.01115\n[1100]\tvalidation_0-mae:0.01111\n[1150]\tvalidation_0-mae:0.01109\n[1200]\tvalidation_0-mae:0.01104\n[1250]\tvalidation_0-mae:0.01102\n[1300]\tvalidation_0-mae:0.01099\n[1350]\tvalidation_0-mae:0.01096\n[1400]\tvalidation_0-mae:0.01093\n[1450]\tvalidation_0-mae:0.01091\n[1500]\tvalidation_0-mae:0.01089\n[1550]\tvalidation_0-mae:0.01086\n[1600]\tvalidation_0-mae:0.01085\n[1650]\tvalidation_0-mae:0.01082\n[1700]\tvalidation_0-mae:0.01080\n[1750]\tvalidation_0-mae:0.01079\n[1800]\tvalidation_0-mae:0.01078\n[1850]\tvalidation_0-mae:0.01076\n[1900]\tvalidation_0-mae:0.01075\n[1950]\tvalidation_0-mae:0.01074\n[2000]\tvalidation_0-mae:0.01073\n[2050]\tvalidation_0-mae:0.01072\n[2100]\tvalidation_0-mae:0.01071\n[2150]\tvalidation_0-mae:0.01070\n[2200]\tvalidation_0-mae:0.01069\n[2250]\tvalidation_0-mae:0.01067\n[2300]\tvalidation_0-mae:0.01066\n[2350]\tvalidation_0-mae:0.01065\n[2400]\tvalidation_0-mae:0.01064\n[2450]\tvalidation_0-mae:0.01063\n[2500]\tvalidation_0-mae:0.01062\n[2550]\tvalidation_0-mae:0.01061\n[2600]\tvalidation_0-mae:0.01060\n[2650]\tvalidation_0-mae:0.01058\n[2700]\tvalidation_0-mae:0.01059\n[2750]\tvalidation_0-mae:0.01058\n[2800]\tvalidation_0-mae:0.01058\n[2850]\tvalidation_0-mae:0.01056\n[2900]\tvalidation_0-mae:0.01055\n[2950]\tvalidation_0-mae:0.01055\n[3000]\tvalidation_0-mae:0.01054\n[3050]\tvalidation_0-mae:0.01053\n[3100]\tvalidation_0-mae:0.01052\n[3150]\tvalidation_0-mae:0.01051\n[3200]\tvalidation_0-mae:0.01050\n[3244]\tvalidation_0-mae:0.01051\nValidation MAE: 0.010499483492832066\n","output_type":"stream"}],"execution_count":164},{"cell_type":"code","source":"from rdkit import Chem\nfrom rdkit.Chem import Descriptors, rdMolDescriptors, AllChem\nimport numpy as np\n\ndef smiles_to_Density_features_safe(smiles, fp_radius=2, fp_bits=512):\n    \"\"\"\n    Extracts safe features from SMILES string for predicting density.\n    Always returns a fixed-length feature vector, even if SMILES is invalid.\n    \"\"\"\n    try:\n        mol = Chem.MolFromSmiles(smiles)\n        if mol is None:\n            raise ValueError(\"Invalid SMILES\")\n\n        # Basic molecular descriptors\n        mol_wt = Descriptors.MolWt(mol)                   # molecular weight\n        logp = Descriptors.MolLogP(mol)                   # hydrophobicity\n        tpsa = Descriptors.TPSA(mol)                      # polar surface area\n        mol_vol = rdMolDescriptors.CalcExactMolWt(mol) / (mol_wt + 1e-6)  # crude proxy for packing\n        heavy_atoms = Descriptors.HeavyAtomCount(mol)\n        rot_bonds = Descriptors.NumRotatableBonds(mol)\n        h_donors = Descriptors.NumHDonors(mol)\n        h_acceptors = Descriptors.NumHAcceptors(mol)\n        aromatic_ratio = sum(a.GetIsAromatic() for a in mol.GetAtoms()) / (mol.GetNumAtoms() + 1e-6)\n\n        # Topological descriptors\n        balaban_j = Descriptors.BalabanJ(mol)\n        chi0 = Descriptors.Chi0(mol)\n        chi1 = Descriptors.Chi1(mol)\n        chi2 = Descriptors.Chi2n(mol)\n\n        # Fingerprint (structure bits)\n        fp = AllChem.GetMorganFingerprintAsBitVect(mol, radius=fp_radius, nBits=fp_bits)\n        fp_arr = np.array(fp)\n\n        # Combine descriptors + fingerprint\n        features = np.array([\n            mol_wt, logp, tpsa, mol_vol,\n            heavy_atoms, rot_bonds, h_donors, h_acceptors,\n            aromatic_ratio, balaban_j, chi0, chi1, chi2\n        ])\n\n        return np.concatenate([features, fp_arr])\n\n    except Exception:\n        # If SMILES invalid or RDKit fails → return zero vector\n        return np.zeros(13 + fp_bits)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-21T07:14:24.181407Z","iopub.execute_input":"2025-08-21T07:14:24.182072Z","iopub.status.idle":"2025-08-21T07:14:24.190930Z","shell.execute_reply.started":"2025-08-21T07:14:24.182042Z","shell.execute_reply":"2025-08-21T07:14:24.190011Z"}},"outputs":[],"execution_count":223},{"cell_type":"code","source":"X_Density = []\nY_Density = []\n\nfor smi, target in zip(Density_train[\"SMILES\"], Density_train[\"Density\"]):\n    feats = smiles_to_Density_features(smi)\n    if feats is not None:\n        X_Density.append(feats)\n        Y_Density.append(target)\n\nX_Density = np.array(X_Density)\nY_Density = np.array(Y_Density)\n\nprint(\"Feature matrix shape:\", X_Density.shape)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-21T07:14:27.468874Z","iopub.execute_input":"2025-08-21T07:14:27.469576Z","iopub.status.idle":"2025-08-21T07:14:29.061091Z","shell.execute_reply.started":"2025-08-21T07:14:27.469540Z","shell.execute_reply":"2025-08-21T07:14:29.060074Z"}},"outputs":[{"name":"stdout","text":"Feature matrix shape: (613, 525)\n","output_type":"stream"}],"execution_count":224},{"cell_type":"code","source":"# XGBOOST\nmodel_Density = xgb.XGBRegressor(\n    n_estimators=1800,\n    learning_rate=0.04,\n    max_depth=9,\n    subsample=0.5,\n    colsample_bytree=0.8,\n    reg_lambda=1,    \n    reg_alpha=0.1,   \n    random_state=42,\n    tree_method=\"hist\"\n)\n\nY_Density = Density_train['Density'].values\nX_train_D, X_test_D, Y_train_D, Y_test_D = train_test_split(X_Density, Y_Density, test_size=0.2, random_state=42,shuffle=True)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-21T06:39:22.103706Z","iopub.execute_input":"2025-08-21T06:39:22.104496Z","iopub.status.idle":"2025-08-21T06:39:22.112244Z","shell.execute_reply.started":"2025-08-21T06:39:22.104460Z","shell.execute_reply":"2025-08-21T06:39:22.111469Z"}},"outputs":[],"execution_count":170},{"cell_type":"code","source":"# XGBOOST\nmodel_Density = xgb.XGBRegressor(\n    n_estimators=2000,\n    learning_rate=0.05,\n    max_depth=9,\n    subsample=0.5,\n    colsample_bytree=0.8,\n    reg_lambda=1,    \n    reg_alpha=0.1,   \n    random_state=42,\n    tree_method=\"hist\"\n)\n\nY_Density = Density_train['Density'].values\nX_train_D, X_test_D, Y_train_D, Y_test_D = train_test_split(X_Density, Y_Density, test_size=0.2, random_state=42,shuffle=True)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-21T06:44:07.642342Z","iopub.execute_input":"2025-08-21T06:44:07.642669Z","iopub.status.idle":"2025-08-21T06:44:07.650389Z","shell.execute_reply.started":"2025-08-21T06:44:07.642645Z","shell.execute_reply":"2025-08-21T06:44:07.649511Z"}},"outputs":[],"execution_count":198},{"cell_type":"code","source":"model_Density.fit(\n    X_train_D, Y_train_D,\n    eval_set=[(X_test_D, Y_test_D)],\n    eval_metric=\"mae\",\n    early_stopping_rounds=50,\n    verbose=50\n)\nY_pred_D = model_Density.predict(X_test_D)\nprint(\"Validation MAE:\", mean_absolute_error(Y_test_D, Y_pred_D))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-21T06:44:07.705710Z","iopub.execute_input":"2025-08-21T06:44:07.706061Z","iopub.status.idle":"2025-08-21T06:44:09.386749Z","shell.execute_reply.started":"2025-08-21T06:44:07.706037Z","shell.execute_reply":"2025-08-21T06:44:09.385627Z"}},"outputs":[{"name":"stdout","text":"[0]\tvalidation_0-mae:0.10292\n[50]\tvalidation_0-mae:0.04041\n","output_type":"stream"},{"name":"stderr","text":"/usr/local/lib/python3.11/dist-packages/xgboost/sklearn.py:889: UserWarning: `eval_metric` in `fit` method is deprecated for better compatibility with scikit-learn, use `eval_metric` in constructor or`set_params` instead.\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/xgboost/sklearn.py:889: UserWarning: `early_stopping_rounds` in `fit` method is deprecated for better compatibility with scikit-learn, use `early_stopping_rounds` in constructor or`set_params` instead.\n  warnings.warn(\n","output_type":"stream"},{"name":"stdout","text":"[100]\tvalidation_0-mae:0.03395\n[150]\tvalidation_0-mae:0.03237\n[200]\tvalidation_0-mae:0.03168\n[250]\tvalidation_0-mae:0.03165\n[300]\tvalidation_0-mae:0.03144\n[350]\tvalidation_0-mae:0.03139\n[400]\tvalidation_0-mae:0.03119\n[450]\tvalidation_0-mae:0.03111\n[500]\tvalidation_0-mae:0.03097\n[535]\tvalidation_0-mae:0.03106\nValidation MAE: 0.030954589425173876\n","output_type":"stream"}],"execution_count":199},{"cell_type":"code","source":"# 0.03137635296227853\nfrom rdkit import Chem\nfrom rdkit.Chem import Descriptors, rdMolDescriptors, AllChem\n\ndef smiles_to_Rg_features(smiles, fp_radius=2, fp_bits=1024):\n    \"\"\"\n    Extracts features for Radius of Gyration (Rg) prediction:\n    - 2D descriptors (size, flexibility, polarity)\n    - Morgan fingerprints (bit vector of length fp_bits)\n    \"\"\"\n    try:\n        mol = Chem.MolFromSmiles(smiles)\n        if mol is None:\n            return None\n\n        # --- Descriptors (Rg proxies) ---\n        mw = Descriptors.MolWt(mol)\n        heavy_atoms = mol.GetNumHeavyAtoms()\n        rot_bonds = Descriptors.NumRotatableBonds(mol)\n        tpsa = Descriptors.TPSA(mol)\n        logp = Descriptors.MolLogP(mol)\n        kappa1 = rdMolDescriptors.CalcKappa1(mol)\n        kappa2 = rdMolDescriptors.CalcKappa2(mol)\n        kappa3 = rdMolDescriptors.CalcKappa3(mol)\n        chi0 = Descriptors.Chi0(mol)\n        chi1 = Descriptors.Chi1(mol)\n        rg_proxy = (mw / (heavy_atoms + 1)) * (1 + rot_bonds * 0.1)\n\n        descriptor_features = [\n            mw, heavy_atoms, rot_bonds, tpsa, logp,\n            kappa1, kappa2, kappa3, chi0, chi1, rg_proxy\n        ]\n\n        # --- Morgan Fingerprints ---\n        fp = AllChem.GetMorganFingerprintAsBitVect(mol, radius=fp_radius, nBits=fp_bits)\n        fp_array = [int(x) for x in fp.ToBitString()]\n\n        # --- Combine ---\n        return descriptor_features + fp_array\n\n    except Exception:\n        return np.zeros(11 + fp_bits)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-21T07:12:45.453041Z","iopub.execute_input":"2025-08-21T07:12:45.453381Z","iopub.status.idle":"2025-08-21T07:12:45.462138Z","shell.execute_reply.started":"2025-08-21T07:12:45.453358Z","shell.execute_reply":"2025-08-21T07:12:45.461168Z"}},"outputs":[],"execution_count":221},{"cell_type":"code","source":"X_Rg = []\nY_Rg = []\n\nfor smi, target in zip(Rg_train[\"SMILES\"], Rg_train[\"Rg\"]):\n    feats = smiles_to_Rg_features(smi, fp_bits=1024)\n    if feats is not None:\n        X_Rg.append(feats)\n        Y_Rg.append(target)\n\nX_Rg = np.array(X_Rg)\nY_Rg = np.array(Y_Rg)\n\nprint(\"Feature matrix shape:\", X_Rg.shape)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-21T07:13:15.802313Z","iopub.execute_input":"2025-08-21T07:13:15.803081Z","iopub.status.idle":"2025-08-21T07:13:16.734881Z","shell.execute_reply.started":"2025-08-21T07:13:15.803048Z","shell.execute_reply":"2025-08-21T07:13:16.734076Z"}},"outputs":[{"name":"stdout","text":"Feature matrix shape: (614, 1035)\n","output_type":"stream"}],"execution_count":222},{"cell_type":"code","source":"# XGBOOST\nmodel_Rg = xgb.XGBRegressor(\n    n_estimators=1800,\n    learning_rate=0.08,\n    max_depth=9,\n    subsample=0.7,\n    colsample_bytree=0.7,\n    reg_lambda=2,\n    gamma=1,\n    reg_alpha=0,   \n    random_state=42,\n    tree_method=\"hist\"\n)\nY_Rg = Rg_train['Rg'].values\nX_train_Rg, X_test_Rg, Y_train_Rg, Y_test_Rg = train_test_split(X_Rg, Y_Rg, test_size=0.2, random_state=42,shuffle=True)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-21T06:45:15.223699Z","iopub.execute_input":"2025-08-21T06:45:15.224704Z","iopub.status.idle":"2025-08-21T06:45:15.232209Z","shell.execute_reply.started":"2025-08-21T06:45:15.224664Z","shell.execute_reply":"2025-08-21T06:45:15.231404Z"}},"outputs":[],"execution_count":205},{"cell_type":"code","source":"model_Rg.fit(\n    X_train_Rg, Y_train_Rg,\n    eval_set=[(X_test_Rg, Y_test_Rg)],\n    eval_metric=\"mae\",\n    early_stopping_rounds=50,\n    verbose=50\n)\nY_pred_Rg = model_Rg.predict(X_test_Rg)\nprint(\"Validation MAE:\", mean_absolute_error(Y_test_Rg, Y_pred_Rg))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-21T06:45:18.528651Z","iopub.execute_input":"2025-08-21T06:45:18.529101Z","iopub.status.idle":"2025-08-21T06:45:19.102209Z","shell.execute_reply.started":"2025-08-21T06:45:18.529072Z","shell.execute_reply":"2025-08-21T06:45:19.101532Z"}},"outputs":[{"name":"stdout","text":"[0]\tvalidation_0-mae:3.69136\n","output_type":"stream"},{"name":"stderr","text":"/usr/local/lib/python3.11/dist-packages/xgboost/sklearn.py:889: UserWarning: `eval_metric` in `fit` method is deprecated for better compatibility with scikit-learn, use `eval_metric` in constructor or`set_params` instead.\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/xgboost/sklearn.py:889: UserWarning: `early_stopping_rounds` in `fit` method is deprecated for better compatibility with scikit-learn, use `early_stopping_rounds` in constructor or`set_params` instead.\n  warnings.warn(\n","output_type":"stream"},{"name":"stdout","text":"[50]\tvalidation_0-mae:1.51663\n[100]\tvalidation_0-mae:1.52346\n[110]\tvalidation_0-mae:1.52407\nValidation MAE: 1.4933989156777425\n","output_type":"stream"}],"execution_count":206},{"cell_type":"code","source":"#1.4933989156777425\nX_sub_Tg = []\n\nfor smi in test_csv[\"SMILES\"]:\n    feats = smiles_to_Tg_features(smi)\n    if feats is not None:\n        X_sub_Tg.append(feats)\n\nX_sub_Tg = np.array(X_sub_Tg)\n\nprint(\"sub matrix shape:\", X_sub_Tg.shape)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-21T06:45:22.339848Z","iopub.execute_input":"2025-08-21T06:45:22.340592Z","iopub.status.idle":"2025-08-21T06:45:22.353438Z","shell.execute_reply.started":"2025-08-21T06:45:22.340560Z","shell.execute_reply":"2025-08-21T06:45:22.352490Z"}},"outputs":[{"name":"stdout","text":"sub matrix shape: (3, 1039)\n","output_type":"stream"}],"execution_count":207},{"cell_type":"code","source":"Y_Tg_sub = model_Tg.predict(X_sub_Tg)\nY_Tg_sub","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-21T06:45:24.298290Z","iopub.execute_input":"2025-08-21T06:45:24.298600Z","iopub.status.idle":"2025-08-21T06:45:24.305815Z","shell.execute_reply.started":"2025-08-21T06:45:24.298576Z","shell.execute_reply":"2025-08-21T06:45:24.305118Z"}},"outputs":[{"execution_count":208,"output_type":"execute_result","data":{"text/plain":"array([145.7898 , 178.53674,  89.0169 ], dtype=float32)"},"metadata":{}}],"execution_count":208},{"cell_type":"code","source":"X_sub_Tc = []\n\nfor smi in test_csv[\"SMILES\"]:\n    feats = smiles_to_Tc_features(smi)\n    if feats is not None:\n        X_sub_Tc.append(feats)\n\nX_sub_Tc = np.array(X_sub_Tc)\n\nprint(\"sub matrix shape:\", X_sub_Tc.shape)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-21T06:45:39.110327Z","iopub.execute_input":"2025-08-21T06:45:39.110976Z","iopub.status.idle":"2025-08-21T06:45:39.132175Z","shell.execute_reply.started":"2025-08-21T06:45:39.110950Z","shell.execute_reply":"2025-08-21T06:45:39.131210Z"}},"outputs":[{"name":"stdout","text":"sub matrix shape: (3, 523)\n","output_type":"stream"}],"execution_count":209},{"cell_type":"code","source":"Y_Tc_sub = model_Tc.predict(X_sub_Tc)\nY_Tc_sub","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-21T06:45:41.351933Z","iopub.execute_input":"2025-08-21T06:45:41.352275Z","iopub.status.idle":"2025-08-21T06:45:41.363235Z","shell.execute_reply.started":"2025-08-21T06:45:41.352250Z","shell.execute_reply":"2025-08-21T06:45:41.362321Z"}},"outputs":[{"execution_count":210,"output_type":"execute_result","data":{"text/plain":"array([0.21007152, 0.23371062, 0.27092543], dtype=float32)"},"metadata":{}}],"execution_count":210},{"cell_type":"code","source":"X_sub_D = []\n\nfor smi in test_csv[\"SMILES\"]:\n    feats = smiles_to_Density_features(smi)\n    if feats is not None:\n        X_sub_D.append(feats)\n\nX_sub_D = np.array(X_sub_D)\n\nprint(\"sub matrix shape:\", X_sub_D.shape)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-21T06:45:45.055122Z","iopub.execute_input":"2025-08-21T06:45:45.055422Z","iopub.status.idle":"2025-08-21T06:45:45.079118Z","shell.execute_reply.started":"2025-08-21T06:45:45.055399Z","shell.execute_reply":"2025-08-21T06:45:45.078008Z"}},"outputs":[{"name":"stdout","text":"sub matrix shape: (3, 525)\n","output_type":"stream"}],"execution_count":211},{"cell_type":"code","source":"Y_Density_sub = model_Density.predict(X_sub_D)\nY_Density_sub","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-21T06:45:50.872607Z","iopub.execute_input":"2025-08-21T06:45:50.873293Z","iopub.status.idle":"2025-08-21T06:45:50.881416Z","shell.execute_reply.started":"2025-08-21T06:45:50.873267Z","shell.execute_reply":"2025-08-21T06:45:50.880567Z"}},"outputs":[{"execution_count":212,"output_type":"execute_result","data":{"text/plain":"array([1.1560928, 1.0837898, 1.0818918], dtype=float32)"},"metadata":{}}],"execution_count":212},{"cell_type":"code","source":"X_sub_Rg = []\n\nfor smi in test_csv[\"SMILES\"]:\n    feats = smiles_to_Rg_features(smi)\n    if feats is not None:\n        X_sub_Rg.append(feats)\n\nX_sub_Rg = np.array(X_sub_Rg)\n\nprint(\"sub matrix shape:\", X_sub_Rg.shape)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-21T06:45:57.261703Z","iopub.execute_input":"2025-08-21T06:45:57.262066Z","iopub.status.idle":"2025-08-21T06:45:57.276646Z","shell.execute_reply.started":"2025-08-21T06:45:57.262040Z","shell.execute_reply":"2025-08-21T06:45:57.275589Z"}},"outputs":[{"name":"stdout","text":"sub matrix shape: (3, 1035)\n","output_type":"stream"}],"execution_count":213},{"cell_type":"code","source":"Y_Rg_sub = model_Rg.predict(X_sub_Rg)\nY_Rg_sub","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-21T06:46:00.133865Z","iopub.execute_input":"2025-08-21T06:46:00.134190Z","iopub.status.idle":"2025-08-21T06:46:00.143293Z","shell.execute_reply.started":"2025-08-21T06:46:00.134168Z","shell.execute_reply":"2025-08-21T06:46:00.141346Z"}},"outputs":[{"execution_count":214,"output_type":"execute_result","data":{"text/plain":"array([22.582312, 20.679268, 17.771944], dtype=float32)"},"metadata":{}}],"execution_count":214},{"cell_type":"code","source":"submission = pd.DataFrame({\n    \"id\": test_csv[\"id\"],\n    \"Tg\" : Y_Tg_sub.ravel(),\n    \"FFV\" : Y_FFV_sub.ravel(),\n    \"Tc\" : Y_Tc_sub.ravel(),\n    \"Density\": Y_Density_sub.ravel(),\n    \"Rg\" : Y_Rg_sub.ravel()\n})\nsubmission\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-21T06:46:02.413626Z","iopub.execute_input":"2025-08-21T06:46:02.414373Z","iopub.status.idle":"2025-08-21T06:46:02.426881Z","shell.execute_reply.started":"2025-08-21T06:46:02.414342Z","shell.execute_reply":"2025-08-21T06:46:02.426058Z"}},"outputs":[{"execution_count":215,"output_type":"execute_result","data":{"text/plain":"           id          Tg       FFV        Tc   Density         Rg\n0  1109053969  145.789795  0.371246  0.210072  1.156093  22.582312\n1  1422188626  178.536743  0.375839  0.233711  1.083790  20.679268\n2  2032016830   89.016899  0.350086  0.270925  1.081892  17.771944","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>Tg</th>\n      <th>FFV</th>\n      <th>Tc</th>\n      <th>Density</th>\n      <th>Rg</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1109053969</td>\n      <td>145.789795</td>\n      <td>0.371246</td>\n      <td>0.210072</td>\n      <td>1.156093</td>\n      <td>22.582312</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1422188626</td>\n      <td>178.536743</td>\n      <td>0.375839</td>\n      <td>0.233711</td>\n      <td>1.083790</td>\n      <td>20.679268</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2032016830</td>\n      <td>89.016899</td>\n      <td>0.350086</td>\n      <td>0.270925</td>\n      <td>1.081892</td>\n      <td>17.771944</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":215},{"cell_type":"code","source":"submission.to_csv(\"submission.csv\", index=False)\nprint(\"Done\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-21T06:46:04.790773Z","iopub.execute_input":"2025-08-21T06:46:04.791621Z","iopub.status.idle":"2025-08-21T06:46:04.803610Z","shell.execute_reply.started":"2025-08-21T06:46:04.791591Z","shell.execute_reply":"2025-08-21T06:46:04.802652Z"}},"outputs":[{"name":"stdout","text":"Done\n","output_type":"stream"}],"execution_count":216},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}